<?xml version="1.0" encoding="UTF-8"?>
<project name="nmdService">

    <property file="build.properties.local"/>

    <property environment="environment"/>
    <property name="app.engine.sdk.directory" location="${environment.GAE_HOME}"/>
    <import file="${app.engine.sdk.directory}/config/user/ant-macros.xml"/>

    <record name="build.log"/>

    <property name="dir.base" value="."/>
    <property name="dir.build" value="${dir.base}/build/"/>
    <property name="dir.release" value="${dir.base}/release/"/>

    <property name="src.web.inf.directory" value="${dir.base}/war/WEB-INF"/>
    <property name="src.meta.inf.directory" value="${dir.base}/war/META-INF"/>
    <property name="src.ionic.app.directory" value="${dir.base}/war/ionic/"/>

    <property name="war.directory" value="${dir.release}/war/"/>
    <property name="web.inf.directory" value="${dir.release}/war/WEB-INF/"/>
    <property name="lib.directory" value="${web.inf.directory}/lib/"/>
    <property name="classes.directory" value="${web.inf.directory}/classes/"/>
    <property name="meta.inf.directory" value="${classes.directory}/META-INF/"/>

    <property name="dir.source" value="${dir.base}/src/"/>
    <property name="dir.source.main.java" value="${dir.source}/main/java"/>
    <property name="dir.source.test.java" value="${dir.source}/test/java"/>

    <property name="dir.dependencies" value="${dir.base}/lib/"/>
    <property name="dir.dependencies.compile" value="${dir.dependencies}/compile/"/>
    <property name="dir.dependencies.provided" value="${dir.dependencies}/provided/"/>
    <property name="dir.dependencies.runtime" value="${dir.dependencies}/runtime/"/>
    <property name="dir.dependencies.test" value="${dir.dependencies}/test/"/>

    <property name="version.property.file.path" value="swin/version.properties"/>


    <property name="debug" value="off"/>

    <property name="compiler.deprecation" value="off"/>
    <property name="compiler.target" value="1.7"/>
    <property name="compiler.source" value="1.7"/>
    <property name="compiler.depend" value="off"/>
    <property name="compiler.max.memory" value="128m"/>
    <property name="compiler.debug" value="on"/>
    <property name="compiler.optimize" value="off"/>
    <property name="compiler.nowarn" value="off"/>
    <property name="compiler.verbose" value="on"/>


    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.sbas/**"/>
        <exclude name="**/.IJI.*/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
    </patternset>


    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
    </patternset>

    <fileset id="jar.files" dir="">
        <include name="**/*.jar"/>
    </fileset>

    <path id="compile.dependencies" path="${dir.dependencies.compile}">
        <fileset refid="jar.files"/>
    </path>


    <path id="provided.dependencies" path="${dir.dependencies.provided}">
        <fileset refid="jar.files"/>
    </path>


    <path id="runtime.dependencies" path="${dir.dependencies.runtime}">
        <fileset refid="jar.files"/>
    </path>


    <path id="app.engine.dependencies">

        <fileset dir="${app.engine.sdk.directory}/lib/">
            <include name="shared/**/*.jar"/>
        </fileset>

        <fileset dir="${app.engine.sdk.directory}/lib/opt/user/appengine-api-labs/v1/">
            <include name="**/*.jar"/>
        </fileset>

        <fileset dir="${app.engine.sdk.directory}/lib/user/">
            <include name="**/appengine-api-1.0-sdk-1.*.jar"/>
        </fileset>

    </path>

    <path id="test.dependencies" path="${dir.dependencies.test}">
        <fileset refid="jar.files"/>
    </path>


    <path id="execution.dependencies">
        <path refid="compile.dependencies"/>
        <path refid="provided.dependencies"/>
        <path refid="runtime.dependencies"/>
    </path>


    <path id="java.source.path" path="${dir.source.main.java}"/>


    <fileset id="source.main.java" dir="${dir.source.main.java}">
        <include name="**/*.java"/>
    </fileset>


    <path id="java.test.path" path="${dir.source.test.java}"/>


    <fileset id="source.test.java" dir="${dir.source.test.java}">
        <include name="**/*.java"/>
    </fileset>


    <fileset id="source.test.filtered.java" dir="${dir.source.test.java}">
        <include name="/unit/**/CachedFeedItemsRepositoryTest.java"/>
    </fileset>


    <fileset id="source.all.java" dir="${dir.source}">
        <include name="**/*.java"/>
    </fileset>

    <filterset id="properties.and.security">
        <filter token="application.identifier" value="${application.identifier}"/>
        <filter token="security.key" value="${security.key}"/>
        <filter token="twitter.apiKey" value="${twitter.apiKey}"/>
        <filter token="twitter.apiSecret" value="${twitter.apiSecret}"/>
        <filter token="instagram.clientId" value="${instagram.clientId}"/>
        <filter token="email" value="${email}"/>
    </filterset>

    <target name="-get_commit_SHA">

        <exec executable="${git.executable}" outputproperty="git.sha" failonerror="true">
            <arg value="log"/>
            <arg value="--pretty=format:%h"/>
            <arg value="-n"/>
            <arg value="1"/>
        </exec>

        <echo message="Latest commit SHA [ ${git.sha} ]"/>

    </target>

    <target name="-fail_if_not_clean">

        <exec executable="${git.executable}" failonerror="true">
            <arg value="diff"/>
            <arg value="--exit-code"/>
        </exec>

    </target>

    <target name="-prepare_dir">
        <delete dir="${param.dir}" includeEmptyDirs="true" quiet="false"/>
        <mkdir dir="${param.dir}"/>
    </target>

    <target name="-init_compiler"
            depends="-init_compilation_conditions, -set_production_compilation_if, -set_debug_compilation_if">

        <property name="compiler.deprecation" value="off"/>
        <property name="compiler.target" value="1.7"/>
        <property name="compiler.source" value="1.7"/>
        <property name="compiler.depend" value="off"/>
        <property name="compiler.max.memory" value="128m"/>

    </target>


    <target name="-init_compilation_conditions">

        <echo message="DEBUG MODE=${debug}"/>

        <condition property="is_debug" value="true">
            <or>
                <equals arg1="${debug}" arg2="true"/>
                <equals arg1="${debug}" arg2="on"/>
            </or>
        </condition>

        <condition property="is_production" value="true">
            <not>
                <or>
                    <equals arg1="${debug}" arg2="true"/>
                    <equals arg1="${debug}" arg2="on"/>
                </or>
            </not>
        </condition>

    </target>


    <target name="-set_production_compilation_if" if="is_production">

        <echo message="PRODUCTION MODE"/>

        <property name="compiler.debug" value="off"/>
        <property name="compiler.debuglevel" value="none"/>
        <property name="compiler.optimize" value="on"/>
        <property name="compiler.nowarn" value="on"/>
        <property name="compiler.verbose" value="off"/>

    </target>


    <target name="-set_debug_compilation_if" if="is_debug">

        <echo message="DEBUG MODE"/>

        <property name="compiler.debug" value="on"/>
        <property name="compiler.debuglevel" value="lines,source"/>
        <property name="compiler.optimize" value="off"/>
        <property name="compiler.nowarn" value="off"/>
        <property name="compiler.verbose" value="on"/>

    </target>

    <target name="-compile_to" depends="-init_compiler">

        <javac destdir="${destination.directory}"
               debug="${compiler.debug}"
               optimize="${compiler.optimize}"
               nowarn="${compiler.nowarn}"
               deprecation="${compiler.deprecation}"
               source="${compiler.source}"
               target="${compiler.target}"
               verbose="${compiler.verbose}"
               depend="${compiler.depend}"
               memoryMaximumSize="${compiler.max.memory}"
               fork="true">

            <src refid="java.source.path"/>
            <classpath refid="app.engine.dependencies"/>
            <classpath refid="compile.dependencies"/>
            <classpath refid="provided.dependencies"/>
            <patternset refid="ignored.files"/>

        </javac>

        <copy todir="${destination.directory}">
            <fileset dir="${dir.source.main.java}">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>

    </target>


    <target name="-compile_with_tests_to">

        <antcall target="-prepare_dir">
            <param name="param.dir" value="${destination.directory}"/>
        </antcall>

        <antcall target="-compile_to">
            <param name="destination.directory" value="${destination.directory}"/>
        </antcall>

        <javac destdir="${destination.directory}"
               debug="${compiler.debug}"
               optimize="${compiler.optimize}"
               nowarn="${compiler.nowarn}"
               deprecation="${compiler.deprecation}"
               source="${compiler.source}"
               target="${compiler.target}"
               verbose="${compiler.verbose}"
               depend="${compiler.depend}"
               memoryMaximumSize="${compiler.max.memory}"
               fork="true">

            <classpath refid="compile.dependencies"/>
            <classpath refid="provided.dependencies"/>
            <classpath refid="test.dependencies"/>
            <classpath location="${destination.directory}"/>
            <src refid="java.test.path"/>
            <patternset refid="ignored.files"/>

        </javac>

    </target>


    <target name="-delete_resources">

        <delete dir="${war.directory}/js/"/>
        <delete dir="${war.directory}/partials/"/>
        <delete dir="${war.directory}/css/"/>
        <delete dir="${war.directory}/img/"/>
        <delete dir="${war.directory}/lib/"/>

        <delete file="${war.directory}/index.html"/>

    </target>


    <target name="-copy_resources">

        <copy todir="${war.directory}/">
            <fileset file="${src.ionic.app.directory}/index.html"/>

            <filterset refid="properties.and.security"/>
        </copy>

        <copy todir="${war.directory}/partials/">
            <fileset dir="${src.ionic.app.directory}/partials/"/>

            <filterset refid="properties.and.security"/>
        </copy>

        <copy todir="${war.directory}/js/">
            <fileset dir="${src.ionic.app.directory}/js/"/>

            <filterset refid="properties.and.security"/>
        </copy>

        <copy todir="${war.directory}/css/">
            <fileset dir="${src.ionic.app.directory}/css/"/>

            <filterset refid="properties.and.security"/>
        </copy>

        <copy todir="${war.directory}/lib/">
            <fileset dir="${src.ionic.app.directory}/lib/"/>
        </copy>

    </target>


    <target name="update_resources">

        <antcall target="-delete_resources"/>
        <antcall target="-copy_resources"/>

    </target>

    <target name="build" depends="-get_commit_SHA">

        <antcall target="-prepare_dir">
            <param name="param.dir" value="${dir.release}"/>
        </antcall>

        <antcall target="-prepare_dir">
            <param name="param.dir" value="${war.directory}"/>
        </antcall>

        <antcall target="-prepare_dir">
            <param name="param.dir" value="${web.inf.directory}"/>
        </antcall>

        <antcall target="-prepare_dir">
            <param name="param.dir" value="${lib.directory}"/>
        </antcall>

        <antcall target="-prepare_dir">
            <param name="param.dir" value="${classes.directory}"/>
        </antcall>

        <antcall target="-compile_to">
            <param name="destination.directory" value="${classes.directory}"/>
        </antcall>

        <copy todir="${lib.directory}" flatten="true">

            <fileset dir="${app.engine.sdk.directory}/lib/user">
                <include name="**/appengine-api-1.0-sdk-1.*.jar"/>
            </fileset>

            <fileset dir="${app.engine.sdk.directory}/lib/opt/user">
                <include name="appengine-api-labs/v1/*.jar"/>
            </fileset>

        </copy>

        <copy todir="${lib.directory}">
            <fileset dir="${dir.dependencies.compile}"/>
        </copy>

        <copy todir="${lib.directory}">
            <fileset dir="${dir.dependencies.runtime}"/>
        </copy>

        <copy file="${src.web.inf.directory}/appengine-web.xml" todir="${web.inf.directory}">
            <fileset dir="${dir.base}/war/WEB-INF">
                <include name="*.xml"/>
            </fileset>

            <filterset refid="properties.and.security"/>

            <filterset>
                <filter token="git.sha" value="${git.sha}"/>
            </filterset>
        </copy>

        <copy todir="${meta.inf.directory}">
            <fileset dir="${src.meta.inf.directory}">
                <include name="*.xml"/>
            </fileset>
        </copy>

        <antcall target="-copy_resources"/>

        <!--static files for test mode only-->
        <copy todir="${war.directory}/feed/">
            <fileset dir="${dir.base}/war/feed/"/>
        </copy>

        <echo message="Latest commit SHA [ ${git.sha} ]"/>

    </target>

    <target name="update" depends="-fail_if_not_clean, build">

        <input message="Enter password : " addproperty="gae.password">
            <handler type="secure"/>
        </input>

        <java classname="com.google.appengine.tools.admin.AppCfg" inputstring="${gae.password}"
              classpath="${app.engine.sdk.directory}/lib/appengine-tools-api.jar" fork="true" failonerror="true">
            <arg value="--email=${email}"/>
            <arg value="--passin"/>
            <arg value="update"/>
            <arg value="${war.directory}"/>
        </java>

        <echo message=" "/>
        <echo message=" "/>
        <echo message="Application deployed successfully."/>
        <echo message="Please switch application version to [ ${git.sha} ]."/>

    </target>

    <target name="rollback">

        <java classname="com.google.appengine.tools.admin.AppCfg"
              classpath="${app.engine.sdk.directory}/lib/appengine-tools-api.jar" fork="true" failonerror="true">
            <arg value="rollback"/>
            <arg value="${war.directory}"/>
        </java>

    </target>

</project>
